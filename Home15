Must have рівень: 


1. Зроби порівняння статичних та динамічних технік тестування. Наведи переваги та можливі обмеження при використанні кожної з них. 




	Статистична техніка тестування
	Динамічна техніка тестування
	Основна інформація
	

	

	Перевага №1
	Виявляє баги на ранніх етапах,що сприяє мінімізації у подальшому подібних помилок. 
	Дослідження всього функціоналу продукту.
	Перевага №2
	Зменшуються зусилля по виправленню багів у процесі розробки.  
	Можливість автоматизації і як наслідок-економія ресурсів .
	Перевага №3 (і т.д.)
	Дає більш ширше охоплення тестами,ніж динамічне, за менший проміжок часу.
	Виявлення складних помилок ,які могли бути пропущені на моменті статичного тестування .
	Обмеження №1
	Потребує вагомого обсягу часу на тестування.
	Потребує вагомого обсягу часу на тестування.
	Обмеження №2
	Перешкоджає виявленню вразливостей, представлених в середовищі виконання.


	Потребує витрати більшої кількості ресурсів.
	Обмеження №3 (і т.д.)
	

	Ціна виправлення більша у порівнянні через виконання на більш пізніх етапах. 
	Висновок
	Статична техніка дає можливість запобігати появу дефектів на пізніх стадіях ,тим самим скорочує потенційні витрати ресурсів .
	Динамічна техніка дозволяє переконатися ,що необхідні характеристики (наприклад:надійність,безпека,продуктивність і тп.)знаходяться на необхідному рівні і відповідає якості продукту 
	

	Середній рівень:


1. Виконай завдання попереднього рівня.
2. Наступне твердження стосується покриття рішень:
Коли код має одну ‘IF” умову, не має циклів (LOOP)  або перемикачів (CASE), будь-який тест, який ми виконаємо, дасть результат 50% покриття рішень (decision coverage). 


Яке твердження є коректним?
   1. Коректно. Будь-який тест кейс надає 100% покриття тверджень, таким чином покриває 50% рішень.
   2. Коректно. Результат будь-якого тесту умови IF буде або правдими, або ні.
   3. Некоректно. Один тест може гарантувати 25% перевірки рішень в цьому випадку.
   4. Некоректно, бо занадто загальне твердження. Ми не можемо знати, чи є воно коректним, бо це залежить від тестованого ПЗ.


3. Є псевдокод: Switch PC on -> Start MS Word -> IF MS Word starts THEN -> Write a poem -> Close MS Word. 


Скільки тест кейсів знадобиться, щоб перевірити його функціонал? 
   5. 1 – для покриття операторів, 2 – для покриття рішень!!!
   6. 1 – для покриття операторів, 1 – для покриття рішень
   7. 2 – для покриття операторів, 2 – для покриття рішень
   8. 2 – для покриття операторів, 1 – для покриття рішень


4. Скільки потрібно тестів для перевірки тверджень коду:      
   1. 2
   2. 1
   3. 3
   4. 4
	Програма максимум:


   1. Виконай завдання двох попередніх рівнів.
   2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.


Є алгоритм: 
Запитай, якого улюбленця має користувач. 
Якщо користувач відповість, що має кота, то запитай, яка порода його улюбленця: «короткошерста чи довгошерста?»
Якщо клієнт відповість «довгошерста», то запитай: «ви бажаєте отримати контакти найближчого грумера?»
Якщо клієнт відповість «так», то скажи: «Надайте адресу найближчої котячої перукарні»
Інакше
Скажи: «Запропонуй магазин з товарами по догляду за шерстю»
Закінчити
Інакше
Скажи «Запропонуй обрати магазин із зоотоварами»
Закінчити
Якщо клієнт не має кота
Скажи “Коли вирішите завести улюбленця – приходьте”
Закінчити


Завдання:
   1. Намалюй схему алгоритму (в інструменті на вибір, наприклад, у вбудованому Google Docs редакторі, figjam чи miro)
   2. Який потрібен мінімальний набір тест-кейсів, щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані?
